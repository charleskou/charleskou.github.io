{"pages":[],"posts":[{"title":"markdown","text":"Markdown是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式。 标题123# 这是一级标题## 这是二级标题### 这是三级标题 引用12&gt;这是引用的内容&gt;&gt;这是引用的内容 分割线12---*** 图片1234![图片alt](图片地址 &apos;&apos;图片title&apos;&apos;)图片alt就是显示在图片下面的文字，相当于对图片内容的解释。图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加 链接12[超链接名](超链接地址 &quot;超链接title&quot;)title可加可不加 代码单行代码： 1`单行代码` 多行代码： 1234(```)多行代码多行代码(```) 前后三个反引号处加了小括号，实际是没有的。这里只是用来演示。 列表123- 列表内容 1. 列表嵌套 2. 嵌套","link":"/2019/08/10/markdown/"},{"title":"study","text":"网站优秀博客：https://www.cnkirito.moe/ 插件网站：https://github.com/ppoffice 版本GA: General Availability（正式发布的版本）在国外都是用GA来说明release版本的RC版：是 Release Candidate 的缩写，意思是发布倒计时，候选版本，处于Gamma阶段，该版本已经完成全部功能并清除大部分的 BUG。到了这个阶段只会除BUG，不会对软件做任何大的更改。从 Alpha到Beta再到Gamma是改进的先后关系，但RC1、RC2往往是取舍关系。Final：正式版。","link":"/2019/08/09/study/"},{"title":"hexo 命令","text":"hexo version显示 Hexo 版本。 hexo init [folder]新建网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。 hexo g生成静态文件。完整命令： 1hexo generate 监控文件变动，实时编译 1hexo generate -w hexo s启动服务器。默认情况下，访问网址为： http://localhost:4000/。-p 或 –port 参数可指定端口完整命令： 1hexo server hexo d部署网站。完整命令： 1hexo deploy hexo new ‘文章标题’新建文章。如果标题包含空格，使用引号括起来。eg: 1hexo new &quot;post title with whitespace&quot; hexo list 列出网站资料。Description:List the information of the site.Arguments: type Available types: page, post, route, tag, category hexo clean清除缓存文件 (db.json) 和已生成的静态文件 (public)。在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。","link":"/2019/08/08/hexo/hexo-command/"},{"title":"hexo 博客搭建","text":"安装nodenode -vnpm -v gitgit -v github个人仓库username.github.io hexo12npm install -g hexo-clihexo version 创建网站123hexo init blogcd blognpm install 文章1hexo new &apos;文章标题&apos; 执行完成后可以在 /source/_posts 下看到一个“文章标题.md”的文章文件 启动服务启动前先编译生成静态文件 1hexo g 1hexo s 默认访问地址：http://localhost:4000 部署hexo 博客部署 访问网站链接 域名绑定TODO 扩展主题修改下载主题文件到主目录： 12cd your-hexo-sitegit clone https://github.com/iissnan/hexo-theme-next themes/next 修改主目录下的_config.yml，指向自定义的主题： 1theme: {#theme-title} theme-title: 自定义主题的名称 主题定制字体修改：主题source文件夹下css目录示例： 1family-sans = \"Open Sans\", \"Helvetica Neue\", \"Microsoft YaHei\", sans-serif 文章内链1{% post_link post-title-sample 点此查看 %} post-title-sample - 文章名称，如果文章不存在，这段代码将会被直接忽略。 点此查看 - 链接标题。如果置空，则自动提取文章的标题。 文章标签遵循yaml文件格式 12tags：tag-nametags: [tag-name1, tag-name2] 参考：http://www.ruanyifeng.com/blog/2016/07/yaml.html 插件代码着色https://github.com/highlightjs/highlight.jshttps://highlightjs.org/推荐样式：monokai-sublime 实时预览BrowserSync plugin for Hexo. 1npm install hexo-browsersync --save 自动摘要1npm install hexo-excerpt --save","link":"/2019/08/08/hexo/hexo-create/"},{"title":"hexo 博客部署","text":"发布流程 - V2 安装hexo-deployer-git插件 1npm install hexo-deployer-git --save 修改_config.yml配置 12345deploy: type: git repo: https://github.com/username/username.github.io.git branch: master message: 编译 1hexo g 部署 1hexo d 等待2min左右，页面展示。 V2流程中, 步骤1、2只需执行一次。 原理当初次新建一个库的时候，库将自动包含一个master分支。请在这个分支下进行写作和各种配置来完善您的网页。当执行hexo deploy时，Hexo会创建或更新另外一个用于部署的分支，这个分支就是_config.yml配置文件中指定的分支。Hexo会将生成的站点文件推送至该分支下，并且完全覆盖该分支下的已有内容。因此，部署分支应当不同于写作分支。（一个推荐的方式是把master作为写作分支，另外使用public分支作为部署分支。）值得注意的是，hexo deploy并不会对本地或远程的写作分支进行任何操作，因此依旧需要手动推送写作分支的所有改动以实现版本控制。此外，如果您的Github Pages需要使用CNAME文件自定义域名，请将CNAME文件置于写作分支的source_dir目录下，只有这样hexo deploy才能将CNAME文件一并推送至部署分支。 发布流程 - V1 编译：hexo g src分支代码提交 xshell同步到阿里云服务器 服务器端git提交 等待2min左右，页面展示 Tip：服务器初次提交Git配置： 12git config --global user.email &quot;username@xx.com&quot;git config --global user.name &quot;username&quot; 提交时输入username和密码。","link":"/2019/08/09/hexo/hexo-deploy/"},{"title":"design-pattern","text":"","link":"/2019/08/10/java/design-pattern/"},{"title":"Eclipse","text":"安装设置 workspace 编码设置 installed jres package explorer startup and shutdown 可选： sonar server 中文语言包 自动升级 原文链接：https://download.eclipse.org/releases/2019-06/ 格式代码风格：google style文件链接： Eclipse：https://github.com/google/styleguide/blob/gh-pages/eclipse-java-google-style.xml IDEA：https://github.com/google/styleguide/blob/gh-pages/intellij-java-google-style.xml 参考：https://google.github.io/styleguide/javaguide.html译文参考：https://www.jianshu.com/p/c0e5a4a896be","link":"/2019/08/10/java/eclipse/"},{"title":"android","text":"版本 9 IDEAndroid Studio valval a: Int = ch.toInt(); var 变量val 常量 常量不能再次更改 boolean arrayOf Array 日志 swith ==&gt; when for 倒序遍历 init 主构造函数 lateinit 懒加载internal 模块内部可见 inner class 内部类 function ==&gt; fun 四大组件activity 页面 生命周期service 后台 如音乐播放器broadcast receivers 广播接收器 注册监听 顺序 优先级content providers 内容提供者组件 Intent 组件间传值 隐式意图 五大布局 数据库访问 动画 混淆签名打包发布 data class 与 普通class 为什么不用java用kotlin http调用 okhttp 第三方包引用反编译 页面复用 css样式 框架","link":"/2019/08/10/java/android/"},{"title":"guava","text":"ListsArrays","link":"/2019/08/10/java/guava/"},{"title":"lambda","text":"","link":"/2019/08/10/java/lambda/"},{"title":"Maven","text":"常用命令12345mvn cleanmvn packagemvn installmvn clean package -DskipTestsmvn clean package -DskipTests -U mvn install 会将项目生成的构件安装到本地Maven仓库 mirror阿里镜像： 123456&lt;mirror&gt; &lt;id&gt;repo2&lt;/id&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;name&gt;human readable name for this mirror.&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt; &lt;/mirror&gt; nexusmaven私服 配置参考配置文件路径(示例)：C:\\Users\\username.m2\\settings.xml 123456789101112131415161718192021222324252627282930313233343536373839404142&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?&gt;&lt;settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/xsd/settings-1.0.0.xsd\"&gt; &lt;localRepository/&gt; &lt;pluginGroups&gt; &lt;pluginGroup&gt;org.sonarsource.scanner.maven&lt;/pluginGroup&gt; &lt;/pluginGroups&gt; &lt;profiles&gt; &lt;profile&gt; &lt;id&gt;nexus&lt;/id&gt; &lt;repositories&gt; &lt;repository&gt; &lt;id&gt;nexus&lt;/id&gt; &lt;url&gt;http://private.mvnrepository.com/repository/maven-public/&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/repository&gt; &lt;/repositories&gt; &lt;/profile&gt; &lt;/profiles&gt; &lt;activeProfiles&gt; &lt;activeProfile&gt;nexus&lt;/activeProfile&gt; &lt;/activeProfiles&gt; &lt;servers&gt; &lt;server&gt; &lt;id&gt;nexus&lt;/id&gt; &lt;username&gt;username&lt;/username&gt; &lt;password&gt;password&lt;/password&gt; &lt;/server&gt; &lt;/servers&gt; &lt;mirrors&gt; &lt;mirror&gt; &lt;id&gt;repo2&lt;/id&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;name&gt;human readable name for this mirror.&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt; &lt;/mirror&gt; &lt;/mirrors&gt;&lt;/settings&gt; 上传至私服1mvn deploy 用来将项目生成的构件分发到远程Maven仓库 123456789101112&lt;distributionManagement&gt; &lt;repository&gt; &lt;id&gt;nexus&lt;/id&gt; &lt;name&gt;Nexus Release&lt;/name&gt; &lt;url&gt;http://private.mvnrepository.com/repository/maven-releases/&lt;/url&gt; &lt;/repository&gt; &lt;snapshotRepository&gt; &lt;id&gt;nexus&lt;/id&gt; &lt;name&gt;Nexus Snapshot&lt;/name&gt; &lt;url&gt;http://private.mvnrepository.com/repository/maven-snapshots/&lt;/url&gt; &lt;/snapshotRepository&gt;&lt;/distributionManagement&gt; Maven区别对待release版本的构件和snapshot版本的构件，snapshot为开发过程中的版本，实时，但不稳定，release版本则比较稳定。Maven会根据你项目的版本来判断将构件分发到哪个仓库。 snapshot 更新策略maven对构件的更新判断基本上是两种，一种是稳定版本，一种是maven特有的SNAPSHOT版本。稳定版本很好判断，直接根据maven构件的坐标体系就能够获得。先从本地仓库中找，如果本地仓库没有，就从pom.xml和setting.xml配置的远程仓库来找。SNAPSHOT版本的判断比较麻烦，基本步骤如下：假设我在2014年08月22日09时40分52秒在我自己的电脑上使用 “mvn install” 构建了“com.mycompany.demo:test:1.0-SNAPSHOT”。那么Maven会在本地仓库目录“~/.m2/com/mycompany/demo/test/1.0-SNAPSHOT/”下生成文件“maven-metadata-local.xml”，内容如下： 123456789101112131415161718192021222324&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;metadata modelVersion=\"1.1.0\"&gt; &lt;groupId&gt;com.mycompany.demo&lt;/groupId&gt; &lt;artifactId&gt;test&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;versioning&gt; &lt;snapshot&gt; &lt;localCopy&gt;true&lt;/localCopy&gt; &lt;/snapshot&gt; &lt;lastUpdated&gt;20140822084052&lt;/lastUpdated&gt; &lt;snapshotVersions&gt; &lt;snapshotVersion&gt; &lt;extension&gt;jar&lt;/extension&gt; &lt;value&gt;1.0-SNAPSHOT&lt;/value&gt; &lt;updated&gt;20140822084052&lt;/updated&gt; &lt;/snapshotVersion&gt; &lt;snapshotVersion&gt; &lt;extension&gt;pom&lt;/extension&gt; &lt;value&gt;1.0-SNAPSHOT&lt;/value&gt; &lt;updated&gt;20140822084052&lt;/updated&gt; &lt;/snapshotVersion&gt; &lt;/snapshotVersions&gt; &lt;/versioning&gt;&lt;/metadata&gt; 十点钟的时候，其他同事更新了com.mycompany.demo:test:1.0-SNAPSHOT的内容，并通过 “mvn deploy” 发布到了公司的Maven服务器上。公司Maven服务器上产生了文件：test-1.0-20140822.100021-1.jar, test-1.0-20140822.100021-1.pom并更新了maven-metadata.xml，内容如下：xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;metadata modelVersion=&quot;1.1.0&quot;&gt; &lt;groupId&gt;com.mycompany.demo&lt;/groupId&gt; &lt;artifactId&gt;test&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;versioning&gt; &lt;snapshot&gt; &lt;timestamp&gt;20140822.100021&lt;/timestamp&gt; &lt;buildNumber&gt;34&lt;/buildNumber&gt; &lt;/snapshot&gt; &lt;lastUpdated&gt;20140822100021&lt;/lastUpdated&gt; &lt;snapshotVersions&gt; &lt;snapshotVersion&gt; &lt;extension&gt;jar&lt;/extension&gt; &lt;value&gt;1.0-20140822.100021-1&lt;/value&gt; &lt;updated&gt;20140822100021&lt;/updated&gt; &lt;/snapshotVersion&gt; &lt;snapshotVersion&gt; &lt;extension&gt;pom&lt;/extension&gt; &lt;value&gt;1.0-20140822.100021-1&lt;/value&gt; &lt;updated&gt;20130407081828&lt;/updated&gt; &lt;/snapshotVersion&gt; &lt;/versioning&gt; &lt;/metadata&gt;xml在这期间我的电脑上没有发生过任何关于test的构建。 某一天，我需要构建一个依赖于test的项目，于是我运行了mvn package来打包。这个时候，maven做了什么呢（背景：我通过配置镜像，使我本地Maven的任何资源都是从公司的Maven服务器下载的）？ Step1：从公司的Maven服务器上下载maven-metadata.xml，重命名为“maven-metadata-.xml”，并保存到本地仓库相应目录。 Step2：比较maven-metadata-local.xml与maven-metadata-.xml中的lastUpdated时间戳的值。如果maven-metadata-local.xml中的时间戳比较大，则终止。如果maven-metadata-.xml中的时间戳较大，则从公司Maven服务器上下载最新版本。即：testu-1.0.1-20130407.081828-34.jar。这个过程分两步：（1）下载test-1.0-20140822.100021-1.jar到本地Maven仓库。（2）将test-1.0-20140822.100021-1.jar复制一份，覆盖掉原先的test-1.0-SNAPSHOT.jar。也就是说，如果Maven从远程仓库下载了最新的SNAPSHOT发布包的话，那么最新的待时间戳的包和xxx-SNAPSHOT包是完全一样的。 作者：邓涛链接：https://www.zhihu.com/question/24930782/answer/29532274来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","link":"/2019/08/10/java/maven/"},{"title":"Postman","text":"Requestheadersbody PresetsCollectionExport &amp; ImportEnvironmentMockTest123456pm.test(\"Response is Success\", function () { pm.response.to.have.status(200); var jsonData = pm.response.json(); pm.expect(jsonData.success).to.eql(true); pm.expect(jsonData.messageId).to.eql(\"10000\");}); RunnerWorkspaceTeam","link":"/2019/08/10/java/postman/"},{"title":"elk","text":"组件语法使用双引号包起来作为一个短语搜索 “like Gecko”返回结果中需要有http字段 exists:http不能含有http字段 missing:http匹配单个字符 ?匹配0到多个字符 * 搜索结果中必须包含此项 +不能含有此项 -","link":"/2019/08/10/tools/elk/"},{"title":"fiddler","text":"urlreplace路由拦截重定向eg： 12urlreplace 192.168.20.220/hub 192.168.21.110:8080/huburlreplace test.api.com localhost:8088","link":"/2019/08/13/tools/fiddler/"},{"title":"Git Subtree","text":"推送指定文件夹到远程主机指定分支1git subtree push --prefix public origin master public - 指定文件夹master - 指定分支","link":"/2019/08/09/tools/git-subtree/"},{"title":"Grafana","text":"Time series return column named time or time_sec (in UTC), as a unix time stamp or any sql native date data type. You can use the macros below. return column(s) with numeric datatype as valuesOptional: return column named metric to represent the series name. If multiple value columns are returned the metric column is used as prefix. If no column named metric is found the column name of the value column is used as series nameResultsets of time series queries need to be sorted by time. 时间选择","link":"/2019/08/10/tools/grafana/"},{"title":"Jira","text":"","link":"/2019/08/10/tools/jira/"},{"title":"sublime","text":"","link":"/2019/08/10/tools/sublime/"},{"title":"vpn","text":"注册连接vpn后在管理员模式命令行执行以下命令进行注册 123REG ADD HKLM\\SYSTEM\\CurrentControlSet\\Services\\PolicyAgent /v AssumeUDPEncapsulationContextOnSendRule /t REG_DWORD /d 0x2 /fREG ADD HKLM\\SYSTEM\\CurrentControlSet\\Services\\RasMan\\Parameters /v ProhibitIpSec /t REG_DWORD /d 0x0 /fREG ADD HKLM\\SYSTEM\\CurrentControlSet\\Services\\PolicyAgent /v AllowL2TPWeakCrypto /t REG_DWORD /d 0x1 /f","link":"/2019/08/13/tools/vpn/"},{"title":"vscode","text":"实时预览 Ctrl + Shift + P 调出主命令框，输入 Markdown，应该会匹配到几项 Markdown相关命令, 选择Markdown: Open Preview to the Side，就能调出实时预览框 先按Ctrl + K，然后放掉，紧接着再按 v，也能调出实时预览框 ##","link":"/2019/08/10/tools/vscode/"},{"title":"mybatis","text":"batch update批量更新eg: 123456update table_post pinner join ( SELECT u.user_id,u.post_count FROM table_user u) as c_u on p.user_id = c_u.user_idset u.post_count=c_u.post_count; 文档中文文档http://www.mybatis.org/mybatis-3/zh/ mybatis-springhttp://www.mybatis.org/spring/zh/ MyBatis Generatorhttp://www.mybatis.org/generator/http://generator.sturgeon.mopaas.com/ 工具http://www.mybatis.tk/","link":"/2019/08/13/java/mybatis/"},{"title":"lombok","text":"dependency123456&lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;version&gt;1.16.18&lt;/version&gt; &lt;scope&gt;provided&lt;/scope&gt;&lt;/dependency&gt; IDE支持EclipseIDEA @Data@Getter@Setter@Slf4j@AllArgsConstructor@EqualsAndHashCode@Builder","link":"/2019/08/13/java/lombok/"},{"title":"druid","text":"dependency123456&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;&lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid&lt;/artifactId&gt; &lt;version&gt;1.1.10&lt;/version&gt;&lt;/dependency&gt; config12345678910111213141516171819202122232425262728293031323334&lt;bean id=\"dataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\" init-method=\"init\" destroy-method=\"close\"&gt; &lt;!-- 基本属性 url、user、password --&gt; &lt;property name=\"url\" value=\"${jdbc_url}\" /&gt; &lt;property name=\"username\" value=\"${jdbc_user}\" /&gt; &lt;property name=\"password\" value=\"${jdbc_password}\" /&gt; &lt;!-- 配置初始化大小、最小、最大 --&gt; &lt;property name=\"maxActive\" value=\"20\" /&gt; &lt;property name=\"initialSize\" value=\"1\" /&gt; &lt;!-- 配置获取连接等待超时的时间 --&gt; &lt;property name=\"maxWait\" value=\"60000\" /&gt; &lt;property name=\"minIdle\" value=\"1\" /&gt; &lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt; &lt;property name=\"timeBetweenEvictionRunsMillis\" value=\"60000\" /&gt; &lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt; &lt;property name=\"minEvictableIdleTimeMillis\" value=\"300000\" /&gt; &lt;!-- 用来检测连接是否有效的sql，要求是一个查询语句，常用select 'x'。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用。 --&gt; &lt;property name=\"validationQuery\" value=\"SELECT 1\" /&gt; &lt;property name=\"testWhileIdle\" value=\"true\" /&gt; &lt;property name=\"testOnBorrow\" value=\"false\" /&gt; &lt;property name=\"testOnReturn\" value=\"false\" /&gt; &lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 --&gt; &lt;property name=\"poolPreparedStatements\" value=\"true\" /&gt; &lt;property name=\"maxPoolPreparedStatementPerConnectionSize\" value=\"20\" /&gt; &lt;!-- 配置监控统计拦截的filters --&gt; &lt;property name=\"filters\" value=\"stat\" /&gt; &lt;!-- 1.1.4中新增配置，如果有initialSize数量较多时，打开会加快应用启动时间 --&gt; &lt;property name=\"asyncInit\" value=\"true\" /&gt;&lt;/bean&gt; 参考https://github.com/alibaba/druid/wiki/常见问题","link":"/2019/08/13/java/druid/"},{"title":"spring-cloud-config","text":"dependency动态刷新使用限制@RefreshScope @Configuration 不能同时在一个类上使用原因说明： @RefreshScope works (technically) on an @Configuration class, but it might lead to surprising behaviour: e.g. it does not mean that all the @Beans defined in that class are themselves @RefreshScope. Specifically, anything that depends on those beans cannot rely on them being updated when a refresh is initiated, unless it is itself in @RefreshScope (in which it will be rebuilt on a refresh and its dependencies re-injected, at which point they will be re-initialized from the refreshed @Configuration). 参考：https://stackoverflow.com/questions/45137555/refreshscope-not-working-spring-boothttp://projects.spring.io/spring-cloud/spring-cloud.html#_refresh_scope","link":"/2019/08/13/java/spring-cloud-config/"},{"title":"sonar","text":"start123456789docker run -d --name sonarqube \\ -p 9797:9000 -p 9092:9092 \\ -v /opt/sonarqube/temp:/opt/sonarqube/temp \\ -v /opt/sonarqube/conf:/opt/sonarqube/conf \\ -v /opt/sonarqube/extensions:/opt/sonarqube/extensions \\ -e SONARQUBE_JDBC_USERNAME=username \\ -e SONARQUBE_JDBC_PASSWORD=password \\ -e SONARQUBE_JDBC_URL=\"jdbc:mysql://192.168.20.234:3306/sonar?useUnicode=true&amp;characterEncoding=utf8\" \\ sonarqube:7.1 plugins12345678FROM sonarqubeADD ./sonar-l10n-zh-plugin-1.15.jar /opt/sonarqube/extensions/plugins/sonar-l10n-zh-plugin-1.15.jarADD ./sonar-java-plugin-4.7.0.9212.jar /opt/sonarqube/extensions/plugins/sonar-java-plugin-4.7.0.9212.jarADD ./sonar-findbugs-plugin-3.4.4.jar /opt/sonarqube/extensions/plugins/sonar-findbugs-plugin-3.4.4.jarADD ./checkstyle-sonar-plugin-3.6.jar /opt/sonarqube/extensions/plugins/checkstyle-sonar-plugin-3.6.jarADD ./backelite-sonar-swift-plugin-0.3.2.jar /opt/sonarqube/extensions/plugins/backelite-sonar-swift-plugin-0.3.2.jarADD ./sonar-web-plugin-2.5.0.476.jar /opt/sonarqube/extensions/plugins/sonar-web-plugin-2.5.0.476.jarADD ./sonar-javascript-plugin-2.21.0.4409.jar /opt/sonarqube/extensions/plugins/sonar-javascript-plugin-2.21.0.4409.jar IDE SupportEclipseIDEA maven项目sonar扫描本地配置和扫描相关命令 1mvn sonar:sonar 术语 Reliability 可靠性 Security 安全 Maintainability 可维护性 Coverage 覆盖率 Duplications 重复 Quality Gate 质量门限 Compliant Solution 兼容的解决方案 sonar rules建议手工关闭的规则： Field names should comply with a naming convention Local variable and method parameter names should comply with a naming convention Method names should comply with a naming convention Fields in a “Serializable” class should either be transient or serializable Classes without “public” constructors should be “final” Overriding methods should do more than simply call the same method in the super class Static non-final field names should comply with a naming convention Utility classes should not have public constructors Abstract classes without fields should be converted to interfaces @FunctionalInterface annotation should be used to flag Single Abstract Method interfaces An abstract class should have both abstract and concrete methods “throws” declarations should not be superfluou Redundant modifiers should not be used Control structures should use curly braces Methods should not have too many return statements Generic exceptions should never be thrown","link":"/2019/08/13/java/sonar/"},{"title":"spring-boot-2.0","text":"context-pathserver.servlet.context-path","link":"/2019/08/13/java/spring-boot-2-0/"},{"title":"deadlock","text":"for update 是否锁表 事务传播 @Transactional 异常 MySQLTransactionRollbackException 隔离级别 12345678show engines;show variables like '%storage_engine%';select version();select @@tx_isolation; -- 查看数据库隔离级别select @@autocommit;show variables like 'innodb_lock_wait_timeout';show global variables like 'innodb_lock_wait_timeout';set innodb_lock_wait_timeout=1000; -- 设置当前会话 Innodb 行锁等待超时时间，单位秒 INNODB 事务 12345678910111213141516SELECT `trx_id`, `trx_state` AS 事务状态, `trx_started` AS 开始时间, `trx_requested_lock_id`, `trx_wait_started`, `trx_weight` AS 权重, `trx_mysql_thread_id` AS 线程ID, `trx_query`, `trx_operation_state`, `trx_tables_locked` AS 锁表个数, `trx_rows_locked` AS 锁表行数, `trx_rows_modified` AS 修改行数, `trx_autocommit_non_locking` AS 是否自动提交FROM INNODB_TRX t; 场景模拟","link":"/2019/08/13/java/deadlock/"},{"title":"java-8","text":"Stream APIlambda Date-Time","link":"/2019/08/13/java/java-8/"}],"tags":[{"name":"tool","slug":"tool","link":"/tags/tool/"},{"name":"TODO","slug":"TODO","link":"/tags/TODO/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"Java","slug":"Java","link":"/tags/Java/"},{"name":"android","slug":"android","link":"/tags/android/"},{"name":"java","slug":"java","link":"/tags/java/"},{"name":"kotlin","slug":"kotlin","link":"/tags/kotlin/"},{"name":"git","slug":"git","link":"/tags/git/"},{"name":"Android","slug":"Android","link":"/tags/Android/"},{"name":"Kotlin","slug":"Kotlin","link":"/tags/Kotlin/"},{"name":"Tool","slug":"Tool","link":"/tags/Tool/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"Git","slug":"Git","link":"/tags/Git/"},{"name":"Spring Cloud","slug":"Spring-Cloud","link":"/tags/Spring-Cloud/"}],"categories":[]}